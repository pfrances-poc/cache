name: CI/CD Pipeline avec Cache Optimis√©

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  merge_group:
    # Ce workflow s'ex√©cute dans le contexte des merge groups

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job pour les tests et validations (s'ex√©cute sur tous les contextes)
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Run build
        run: npm run build

  # Job pour le build et push Docker (seulement dans les merge groups)
  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    # ‚ö†Ô∏è  IMPORTANT: Ce job ne s'ex√©cute QUE dans les merge groups
    if: github.event_name == 'merge_group'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # Utilise le driver docker-container pour un meilleur cache
          driver-opts: network=host

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # üöÄ Configuration du cache optimis√©e
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          # Utilise les build args pour tracer les builds
          build-args: |
            BUILD_TIME=${{ github.run_number }}
            COMMIT_SHA=${{ github.sha }}
            BRANCH=${{ github.ref_name }}

  # Job pour le scan de s√©curit√© (optionnel, seulement dans merge groups)
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'merge_group'

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
